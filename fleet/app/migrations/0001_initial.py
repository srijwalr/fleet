<<<<<<< HEAD
# Generated by Django 2.1.15 on 2020-12-01 06:19
=======
# Generated by Django 2.1.15 on 2020-11-03 07:49
>>>>>>> 32ca857026708f222b9c07f2a31fd338ffc1149b

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('code', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Employee name')),
                ('password', models.CharField(blank=True, max_length=256, null=True)),
                ('slno', models.IntegerField(blank=True, null=True)),
                ('remarks', models.CharField(blank=True, max_length=250, null=True)),
                ('active', models.CharField(blank=True, max_length=1, null=True, verbose_name='User Status')),
                ('makerid', models.IntegerField(blank=True, null=True)),
                ('maketime', models.DateTimeField(blank=True, null=True)),
                ('logcount', models.IntegerField(blank=True, null=True)),
                ('logattempt', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Accessories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Driver name')),
                ('phone', models.CharField(max_length=12, verbose_name='Phone number')),
                ('bata', models.IntegerField(blank=True, default=0, null=True, verbose_name='BATA')),
                ('advance', models.IntegerField(default=0, verbose_name='Advance')),
                ('expense', models.IntegerField(default=0, verbose_name='Expense')),
                ('is_settled', models.BooleanField(default=False, verbose_name='Salary settlement')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='media')),
            ],
            options={
                'db_table': 'Driver',
            },
        ),
        migrations.CreateModel(
            name='Freighttypes',
            fields=[
                ('fretype_id', models.IntegerField(default=1, primary_key=True, serialize=False)),
                ('fretype_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Code')),
                ('fretype_desc', models.CharField(blank=True, max_length=100, null=True, verbose_name='Description')),
                ('fretype_slno', models.IntegerField(blank=True, null=True, verbose_name='Serial no.')),
                ('fretype_remarks', models.CharField(blank=True, max_length=250, null=True, verbose_name='Remarks')),
                ('fretype_active', models.CharField(blank=True, max_length=1, null=True, verbose_name='Status')),
                ('fretype_nnc_code', models.CharField(blank=True, max_length=10, null=True)),
                ('fretype_whmcode', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('code', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Employee name')),
                ('slno', models.IntegerField(blank=True, null=True)),
                ('remarks', models.CharField(blank=True, max_length=250, null=True)),
                ('active', models.CharField(blank=True, max_length=1, null=True, verbose_name='User Status')),
                ('makerid', models.IntegerField(blank=True, null=True)),
                ('maketime', models.DateTimeField(blank=True, null=True)),
                ('logcount', models.IntegerField(blank=True, null=True)),
                ('logattempt', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'Profile',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Accessories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Driver name')),
                ('phone', models.CharField(max_length=12, verbose_name='Phone number')),
                ('bata', models.IntegerField(blank=True, default=0, null=True, verbose_name='BATA')),
                ('advance', models.IntegerField(default=0, verbose_name='Advance')),
                ('expense', models.IntegerField(default=0, verbose_name='Expense')),
                ('is_settled', models.BooleanField(default=False, verbose_name='Salary settlement')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('salary', models.IntegerField(default=0, verbose_name='Fixed salary')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='media')),
                ('licence', models.FileField(blank=True, null=True, upload_to='media')),
                ('lno', models.CharField(max_length=16, verbose_name='Licence number')),
                ('rationcard', models.FileField(blank=True, null=True, upload_to='media')),
                ('aadhar', models.FileField(blank=True, null=True, upload_to='media')),
                ('is_temp', models.BooleanField(default=False, verbose_name='Permanent')),
                ('payment', models.IntegerField(blank=True, default=0, null=True, verbose_name='Payment')),
                ('receipt', models.IntegerField(blank=True, default=0, null=True, verbose_name='Receipt')),
                ('admin_approved', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'Driver',
            },
        ),
        migrations.CreateModel(
            name='EntryTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('veh', models.CharField(max_length=30, verbose_name='Vehicle number')),
                ('purpose', models.CharField(max_length=30, verbose_name='Purpose')),
                ('in_time', models.DateTimeField(blank=True, null=True, verbose_name='In Time')),
                ('out_time', models.DateTimeField(blank=True, null=True, verbose_name='Out Time')),
            ],
        ),
        migrations.CreateModel(
            name='FuelLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=15, verbose_name='Vehicle size')),
                ('manfr', models.CharField(max_length=25, verbose_name='Manufacturer')),
                ('no', models.CharField(max_length=20, unique=True, verbose_name='Indent no')),
                ('date', models.DateField(default=datetime.datetime.now, verbose_name='Date')),
                ('diesel', models.IntegerField(verbose_name='Diesel in Litres')),
                ('petrol', models.IntegerField(blank=True, null=True, verbose_name='Petrol in Litres')),
                ('lub', models.IntegerField(blank=True, null=True, verbose_name='Lube oil in Litres')),
                ('othr', models.IntegerField(blank=True, null=True, verbose_name='Others')),
                ('odo', models.IntegerField(verbose_name='Odo reading(in km)')),
                ('fuel', models.IntegerField(verbose_name='Fuel filled(in Rs)')),
            ],
            options={
                'db_table': 'Fuellog',
            },
        ),
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('head', models.CharField(max_length=30, verbose_name='Purpose')),
                ('cost', models.IntegerField(default=0, verbose_name='Cost')),
                ('narration', models.TextField(verbose_name='Narration')),
                ('timestamp', models.DateField(default=datetime.datetime.now, verbose_name='Time')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Region')),
                ('image', models.ImageField(blank=True, null=True, upload_to='media')),
                ('desc', models.CharField(max_length=30, verbose_name='Description')),
                ('location', models.CharField(blank=True, max_length=25, null=True, verbose_name='Location')),
            ],
            options={
                'db_table': 'Region',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tripno', models.CharField(max_length=20, verbose_name='Trip Number')),
                ('no', models.CharField(max_length=20, verbose_name='Number')),
                ('ftype', models.FloatField(blank=True, choices=[(1.0, 'ACE'), (1.7, 'Dosth'), (2.0, '10.5FT'), (2.3, '14FT'), (2.6, '17FT'), (2.9, '19FT'), (3.1, '20FT'), (3.1, '22FT')], null=True, verbose_name='Vehicle Type')),
                ('advance', models.IntegerField(blank=True, null=True, verbose_name='Advance')),
                ('start', models.IntegerField(verbose_name='Starting odo')),
                ('end', models.IntegerField(verbose_name='Ending odo')),
                ('km', models.IntegerField(verbose_name='Distance(in kms)')),
                ('source', models.CharField(max_length=60, verbose_name='From')),
                ('dest', models.CharField(max_length=60, verbose_name='To')),
                ('lr', models.CharField(max_length=100, verbose_name='LR Number')),
                ('date', models.DateField(default=datetime.datetime.now, verbose_name='Date')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Approve Trip')),
                ('bata', models.IntegerField(default=0, verbose_name='BATA')),
                ('status', models.BooleanField(default=0, verbose_name='Open')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.Driver', verbose_name='Driver')),
            ],
            options={
                'db_table': 'Trip',
            },
        ),
        migrations.CreateModel(
            name='Tripsheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.Driver', verbose_name='Assigned Driver')),
            ],
            options={
                'db_table': 'Tripsheet',
            },
        ),
        migrations.CreateModel(
            name='Tyre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.CharField(choices=[('FL', 'Front Left'), ('FR', 'Front Right'), ('BL', 'Back Left'), ('BR', 'Back Right'), ('BL1', 'Back Left+1'), ('BR1', 'Back Right+1'), ('ST', 'Stepney'), ('OT', 'Others')], max_length=7, verbose_name='Description')),
                ('dtl', models.CharField(max_length=15, verbose_name='Tyre no.')),
                ('make', models.CharField(max_length=25, verbose_name='Make')),
            ],
            options={
                'db_table': 'Tyre',
            },
        ),
        migrations.CreateModel(
            name='Usercat',
            fields=[
                ('id', models.IntegerField(default=1, primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=4, null=True)),
                ('desc', models.CharField(blank=True, max_length=20, null=True)),
                ('remarks', models.CharField(blank=True, max_length=250, null=True)),
                ('active', models.CharField(blank=True, max_length=1, null=True)),
                ('slno', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'UserCat',
            },
        ),
        migrations.CreateModel(
            name='FuelLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=15, verbose_name='Vehicle size')),
                ('manfr', models.CharField(max_length=25, verbose_name='Manufacturer')),
                ('no', models.CharField(max_length=20, unique=True, verbose_name='Indent no')),
                ('date', models.DateField(default=datetime.datetime.now, verbose_name='Date')),
                ('diesel', models.IntegerField(verbose_name='Diesel in Litres')),
                ('petrol', models.IntegerField(blank=True, null=True, verbose_name='Petrol in Litres')),
                ('lub', models.IntegerField(blank=True, null=True, verbose_name='Lube oil in Litres')),
                ('othr', models.IntegerField(blank=True, null=True, verbose_name='Others')),
                ('odo', models.IntegerField(verbose_name='Odo reading(in km)')),
                ('fuel', models.IntegerField(verbose_name='Fuel filled(in Rs)')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, verbose_name='Region')),
                ('image', models.ImageField(blank=True, null=True, upload_to='media')),
                ('location', models.CharField(blank=True, max_length=25, null=True, verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no', models.CharField(max_length=20, verbose_name='Number')),
                ('ftype', models.FloatField(blank=True, choices=[(1.0, 'ACE'), (1.7, 'Dosth'), (2.0, '10.5FT'), (2.3, '14FT'), (2.6, '17FT'), (2.9, '19FT'), (3.1, '20FT'), (3.1, '22FT')], null=True, verbose_name='Vehicle Type')),
                ('advance', models.IntegerField(blank=True, null=True, verbose_name='Advance')),
                ('start', models.IntegerField(verbose_name='Starting odo')),
                ('end', models.IntegerField(verbose_name='Ending odo')),
                ('km', models.IntegerField(verbose_name='Distance(in kms)')),
                ('source', models.CharField(max_length=60, verbose_name='From')),
                ('dest', models.CharField(max_length=60, verbose_name='To')),
                ('lr', models.CharField(max_length=100, verbose_name='LR Number')),
                ('date', models.DateField(default=datetime.datetime.now, verbose_name='Date')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Approve Trip')),
                ('bata', models.IntegerField(default=0, verbose_name='BATA')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.Driver', verbose_name='Driver')),
            ],
        ),
        migrations.CreateModel(
            name='Tripsheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.Driver', verbose_name='Assigned Driver')),
            ],
        ),
        migrations.CreateModel(
            name='Tyre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.CharField(choices=[('FL', 'Front Left'), ('FR', 'Front Right'), ('BL', 'Back Left'), ('BR', 'Back Right'), ('BL1', 'Back Left+1'), ('BR1', 'Back Right+1'), ('ST', 'Stepney'), ('OT', 'Others')], max_length=7, verbose_name='Description')),
                ('dtl', models.CharField(max_length=15, verbose_name='Tyre no.')),
                ('make', models.CharField(max_length=25, verbose_name='Make')),
            ],
            options={
                'db_table': 'Tyre',
            },
        ),
        migrations.CreateModel(
            name='Usercategory',
            fields=[
                ('usrcat_id', models.IntegerField(default=1, primary_key=True, serialize=False)),
                ('usrcat_code', models.CharField(blank=True, max_length=4, null=True)),
                ('usercat_desc', models.CharField(blank=True, max_length=20, null=True)),
                ('usercat_remarks', models.CharField(blank=True, max_length=250, null=True)),
                ('usercat_active', models.CharField(blank=True, max_length=1, null=True)),
                ('usercat_slno', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'UserCategory',
            },
        ),
        migrations.CreateModel(
            name='Vehiclecategory',
            fields=[
                ('vehcat_id', models.IntegerField(default=1, primary_key=True, serialize=False)),
                ('vehcat_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Code')),
                ('vehcat_desc', models.CharField(blank=True, max_length=100, null=True, verbose_name='Description')),
                ('vehcat_wtcapacity', models.FloatField(blank=True, null=True, verbose_name='Weight capacity')),
                ('vehcat_length', models.FloatField(blank=True, null=True, verbose_name='Length')),
                ('vehcat_width', models.FloatField(blank=True, null=True, verbose_name='Width')),
                ('vehcat_ft', models.CharField(blank=True, max_length=50, null=True)),
                ('vehcat_kmrate', models.DecimalField(blank=True, decimal_places=2, max_digits=18, null=True, verbose_name='KM Rate')),
                ('vehcat_slno', models.IntegerField(blank=True, null=True, verbose_name='Serial no.')),
                ('vehcat_active', models.CharField(blank=True, max_length=1, null=True)),
                ('vehcat_remarks', models.CharField(blank=True, max_length=250, null=True, verbose_name='Remarks')),
                ('vehcat_makerid', models.IntegerField(blank=True, null=True)),
                ('vehcat_maketime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'VehicleCategory',
            },
        ),
        migrations.CreateModel(
            name='Vehiclemaster',
            fields=[
                ('vehmas_id', models.IntegerField(default=1, primary_key=True, serialize=False)),
                ('vehmas_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Vehicle Number')),
                ('vehmas_desc', models.CharField(blank=True, max_length=100, null=True, verbose_name='Description')),
                ('vehmas_catpntr', models.IntegerField(blank=True, null=True, verbose_name='Category')),
                ('vehmas_drivername', models.CharField(blank=True, max_length=20, null=True, verbose_name='Driver Name')),
                ('vehmas_driverphone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Phone Number')),
<<<<<<< HEAD
                ('vehmas_frtyppntr', models.IntegerField(blank=True, null=True, verbose_name='Vehicle Mode')),
=======
>>>>>>> 32ca857026708f222b9c07f2a31fd338ffc1149b
                ('vehmas_modepntr', models.IntegerField(blank=True, null=True)),
                ('vehmas_active', models.CharField(blank=True, max_length=1, null=True, verbose_name='Status')),
                ('vehmas_makerid', models.IntegerField(blank=True, null=True)),
                ('vehmas_maketime', models.CharField(blank=True, max_length=30, null=True)),
                ('vehmas_clntpntr', models.IntegerField(blank=True, null=True)),
<<<<<<< HEAD
=======
                ('size', models.CharField(max_length=15, verbose_name='Vehicle size')),
                ('manfr', models.CharField(max_length=25, verbose_name='Manufacturer')),
                ('model', models.CharField(max_length=50, verbose_name='Model')),
                ('chno', models.CharField(blank=True, max_length=50, null=True, verbose_name='Chassis number')),
                ('engno', models.CharField(blank=True, max_length=40, null=True, verbose_name='Engine number')),
                ('reg', models.FileField(blank=True, null=True, upload_to='media', verbose_name='Registratrion file')),
                ('btryno', models.CharField(blank=True, max_length=20, null=True, verbose_name='Battery code')),
                ('btrymodel', models.CharField(blank=True, max_length=20, null=True, verbose_name='Battery Model')),
                ('insno', models.CharField(blank=True, max_length=20, null=True, verbose_name='Insurance Policy number')),
                ('insdate', models.DateField(blank=True, null=True, verbose_name='Insurance expiry')),
                ('insfile', models.FileField(blank=True, default='', null=True, upload_to='media', verbose_name='Insurance File')),
                ('taxno', models.CharField(blank=True, max_length=20, null=True, verbose_name='Tax number')),
                ('taxdate', models.DateField(blank=True, null=True, verbose_name='Tax Expiry')),
                ('taxfile', models.FileField(blank=True, default='', null=True, upload_to='media', verbose_name='Tax File')),
                ('perno', models.CharField(blank=True, max_length=20, null=True, verbose_name='Permit number')),
                ('perdate', models.DateField(blank=True, null=True, verbose_name='Permit expiry')),
                ('perfile', models.FileField(blank=True, default='', null=True, upload_to='media', verbose_name='Permit File')),
                ('fitnno', models.CharField(blank=True, max_length=20, null=True, verbose_name='Fitness number')),
                ('fitndate', models.DateField(blank=True, null=True, verbose_name='Fitness Expiry')),
                ('fitnfile', models.FileField(blank=True, default='', null=True, upload_to='media', verbose_name='Fitness File')),
                ('polno', models.CharField(blank=True, max_length=20, null=True, verbose_name='Pollution number')),
                ('poldate', models.DateField(blank=True, null=True, verbose_name='Pollution Expiry')),
                ('polfile', models.FileField(blank=True, default='', null=True, upload_to='media', verbose_name='Pollution File')),
                ('welfrno', models.CharField(blank=True, max_length=20, null=True, verbose_name='Welfare number')),
                ('welfrdate', models.DateField(blank=True, null=True, verbose_name='Welfare Expiry')),
                ('welfrfile', models.FileField(blank=True, default='', null=True, upload_to='media', verbose_name='Welfare File')),
                ('other', models.CharField(blank=True, max_length=50, null=True, verbose_name='Other Accessories')),
                ('tyreno', models.IntegerField(blank=True, default=4, null=True, verbose_name='No. of Tyres')),
                ('istatus', models.CharField(blank=True, max_length=50, null=True)),
                ('tstatus', models.CharField(blank=True, max_length=40, null=True)),
                ('pstatus', models.CharField(blank=True, max_length=40, null=True)),
                ('fstatus', models.CharField(blank=True, max_length=40, null=True)),
                ('postatus', models.CharField(blank=True, max_length=40, null=True)),
                ('wstatus', models.CharField(blank=True, max_length=40, null=True)),
                ('acc', models.ManyToManyField(blank=True, to='app.Accessories', verbose_name='Accessories')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Region')),
                ('vehmas_catpntr', models.ForeignKey(db_column='vehcat_id', on_delete=django.db.models.deletion.DO_NOTHING, to='app.Vehiclecategory', verbose_name='Category')),
                ('vehmas_frtyppntr', models.ForeignKey(blank=True, db_column='fretype_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.Freighttypes', verbose_name='Vehicle Mode')),
>>>>>>> 32ca857026708f222b9c07f2a31fd338ffc1149b
            ],
            options={
                'db_table': 'VehicleMaster',
            },
        ),
        migrations.AddField(
            model_name='tyre',
            name='flt',
            field=models.ForeignKey(blank=True, db_column='vehmas_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app.Vehiclemaster', verbose_name='Vehicle'),
        ),
        migrations.AddField(
            model_name='tripsheet',
            name='veh',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.Vehiclemaster', verbose_name='Vehicle number'),
        ),
        migrations.AddField(
            model_name='trip',
            name='veh',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.Vehiclemaster', verbose_name='Vehicle used'),
        ),
        migrations.AddField(
<<<<<<< HEAD
            model_name='maintenance',
            name='veh',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.Vehiclemaster', verbose_name='Vehicle'),
        ),
        migrations.AddField(
=======
>>>>>>> 32ca857026708f222b9c07f2a31fd338ffc1149b
            model_name='fuellog',
            name='veh',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.Vehiclemaster', verbose_name='Vehicle number'),
        ),
<<<<<<< HEAD
=======
        migrations.AddField(
            model_name='profile',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Region', verbose_name='Region'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='profile',
            name='usrcatpntr',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Usercategory', verbose_name='User Type'),
        ),
>>>>>>> 32ca857026708f222b9c07f2a31fd338ffc1149b
        migrations.AlterUniqueTogether(
            name='trip',
            unique_together={('no', 'driver')},
        ),
    ]
